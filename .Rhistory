for (j in 1:J) {
t.hat       <- theta.hat.j(j,mu,sigma2,tau2)
v.t.hat     <- V.theta.hat.j(j,mu,sigma2,tau2)
theta[j]    <- rnorm(1,t.hat,sqrt(v.t.hat))
}
return(theta)
}
sims          <- 200
mcmc.gibbs      <- function(chain) {
res1          <- as.list(NULL)
param         <- 9
s.param       <- matrix(NA, ncol = param, nrow = sims )
colnames(s.param)<-  c("theta1", "theta2", "theta3", "theta4", "theta5", "theta6", "mu", "sigma2", "tau2")
s.param[1,1:6]<- theta.0[chain,]
s.param[1,9]  <- s.tau.post(theta.0[chain,])
s.param[1,8]  <- s.sigma.post(theta.0[chain,])
s.param[1,7]  <- s.mu(theta.0[chain,],s.param[1,9])
for (s in 2:sims) {
s.param[s,1:6]<- s.theta(s.param[s-1,7],s.param[s-1,8],s.param[s-1,9])
s.param[s,9]  <- s.tau.post(s.param[s,1:6])
s.param[s,8]  <- s.sigma.post(s.param[s,1:6])
s.param[s,7]  <- s.mu(s.param[s,1:6],s.param[s,9])
}
return(s.param)
#Warm-up
}
s.param           <- lapply(1:10, function(x) mcmc.gibbs(x))
s.param.1         <- s.param[[1]][101:200, ]
#Transform the variance in to sd.
s.param.1[,8:9]   <- sqrt(s.param.1[,8:9] )
t(apply(s.param.1,2, function(x) quantile(x, c(.025,.25,.5,.75,.975))))
r.hat             <- function(arg1) {
n               <- dim(arg1)[1]
m               <- dim(arg1)[2]
B               <- (n/(m-1)) * sum( ( apply(arg1,2,mean) - mean(arg1) )^2 )
W               <- (1/m) * (1/(n-1)) * sum( (arg1 - apply(arg1,2,mean))^2 )
sqrt( (n-1)/(n) + B/(W*n) )
}
#r.hat(sapply(1:10,function(x) s.param[[x]][,4] ))
s.mu        <- function(theta,tau2) {
mu.hat    <- mu.hat(theta)
rnorm(1,mu.hat,sqrt(tau2/J))
}
theta.hat.j     <- function(j,mu,sigma2,tau2) {
y.bar.j       <- mean(df$measure[df$machine==j])
n.j           <- length(df$measure[df$machine==j])
( (1/tau2) * mu + (n.j/sigma2) * y.bar.j  ) / ( (1/tau2) + (n.j/sigma2)  )
}
V.theta.hat.j   <- function(j,mu,sigma2,tau2) {
n.j           <- length(df$measure[df$machine==j])
( 1 ) / ( (1/tau2) + (n.j/sigma2) )
}
s.theta         <- function(mu,sigma2,tau2) {
theta         <- NULL
for (j in 1:J) {
t.hat       <- theta.hat.j(j,mu,sigma2,tau2)
v.t.hat     <- V.theta.hat.j(j,mu,sigma2,tau2)
theta[j]    <- rnorm(1,t.hat,sqrt(v.t.hat))
}
return(theta)
}
sims          <- 200
mcmc.gibbs      <- function(chain) {
res1          <- as.list(NULL)
param         <- 9
s.param       <- matrix(NA, ncol = param, nrow = sims )
colnames(s.param)<-  c("theta1", "theta2", "theta3", "theta4", "theta5", "theta6", "mu", "sigma2", "tau2")
s.param[1,1:6]<- theta.0[chain,]
s.param[1,9]  <- s.tau.post(theta.0[chain,])
s.param[1,8]  <- s.sigma.post(theta.0[chain,])
s.param[1,7]  <- s.mu(theta.0[chain,],s.param[1,9])
for (s in 2:sims) {
s.param[s,1:6]<- s.theta(s.param[s-1,7],s.param[s-1,8],s.param[s-1,9])
s.param[s,9]  <- s.tau.post(s.param[s,1:6])
s.param[s,8]  <- s.sigma.post(s.param[s,1:6])
s.param[s,7]  <- s.mu(s.param[s,1:6],s.param[s,9])
}
return(s.param)
#Warm-up
}
s.param           <- lapply(1:10, function(x) mcmc.gibbs(x))
s.param.1         <- s.param[[1]][101:200, ]
#Transform the variance in to sd.
s.param.1[,8:9]   <- sqrt(s.param.1[,8:9] )
t(apply(s.param.1,2, function(x) quantile(x, c(.025,.25,.5,.75,.975))))
r.hat             <- function(arg1) {
n               <- dim(arg1)[1]
m               <- dim(arg1)[2]
B               <- (n/(m-1)) * sum( ( apply(arg1,2,mean) - mean(arg1) )^2 )
W               <- (1/m) * (1/(n-1)) * sum( (arg1 - apply(arg1,2,mean))^2 )
sqrt( (n-1)/(n) + B/(W*n) )
}
#r.hat(sapply(1:10,function(x) s.param[[x]][,4] ))
set.seed(142857)
theta.0         <- sapply(1:6,function(x) sample(df$measure[df$machine==x],10, replace=TRUE))
mu.0            <- apply(theta.0, 1,mean)
tau.hat.2       <- function(theta) {
mu            <- mean(theta)
tau.2         <- ( 1/(J-1) ) * sum((theta - mu)^2)
return(tau.2)
}
s.tau.post      <- function(theta) {
tau.2         <- tau.hat.2(theta)
tau.cond      <- (J - 1) * (tau.2)/rchisq(1,J-1)
return(tau.cond)
}
f.sigma.hat.2   <- function(theta) {
sigma.hat.2   <-  sapply(1:6, function(x) (df$measure[df$machine==x] - theta[x])^2)
sigma.hat.2   <-  (1/n) * sum(unlist(sigma.hat.2))
return(sigma.hat.2)
}
s.sigma.post      <-  function(theta) {
sigma2.hat      <- f.sigma.hat.2(theta)
sigma2.post      <-  (n) * (sigma2.hat)/rchisq(1,n)
return(sigma2.post)
}
mu.hat          <- function(theta) {
mean(theta)
}
s.mu        <- function(theta,tau2) {
mu.hat    <- mu.hat(theta)
rnorm(1,mu.hat,sqrt(tau2/J))
}
theta.hat.j     <- function(j,mu,sigma2,tau2) {
y.bar.j       <- mean(df$measure[df$machine==j])
n.j           <- length(df$measure[df$machine==j])
( (1/tau2) * mu + (n.j/sigma2) * y.bar.j  ) / ( (1/tau2) + (n.j/sigma2)  )
}
V.theta.hat.j   <- function(j,mu,sigma2,tau2) {
n.j           <- length(df$measure[df$machine==j])
( 1 ) / ( (1/tau2) + (n.j/sigma2) )
}
s.theta         <- function(mu,sigma2,tau2) {
theta         <- NULL
for (j in 1:J) {
t.hat       <- theta.hat.j(j,mu,sigma2,tau2)
v.t.hat     <- V.theta.hat.j(j,mu,sigma2,tau2)
theta[j]    <- rnorm(1,t.hat,sqrt(v.t.hat))
}
return(theta)
}
sims          <- 200
mcmc.gibbs      <- function(chain) {
res1          <- as.list(NULL)
param         <- 9
s.param       <- matrix(NA, ncol = param, nrow = sims )
colnames(s.param)<-  c("theta1", "theta2", "theta3", "theta4", "theta5", "theta6", "mu", "sigma2", "tau2")
s.param[1,1:6]<- theta.0[chain,]
s.param[1,9]  <- s.tau.post(theta.0[chain,])
s.param[1,8]  <- s.sigma.post(theta.0[chain,])
s.param[1,7]  <- s.mu(theta.0[chain,],s.param[1,9])
for (s in 2:sims) {
s.param[s,1:6]<- s.theta(s.param[s-1,7],s.param[s-1,8],s.param[s-1,9])
s.param[s,9]  <- s.tau.post(s.param[s,1:6])
s.param[s,8]  <- s.sigma.post(s.param[s,1:6])
s.param[s,7]  <- s.mu(s.param[s,1:6],s.param[s,9])
}
return(s.param)
#Warm-up
}
s.param           <- lapply(1:10, function(x) mcmc.gibbs(x))
s.param.1         <- s.param[[1]][101:200, ]
#Transform the variance in to sd.
s.param.1[,8:9]   <- sqrt(s.param.1[,8:9] )
t(apply(s.param.1,2, function(x) quantile(x, c(.025,.25,.5,.75,.975))))
r.hat             <- function(arg1) {
n               <- dim(arg1)[1]
m               <- dim(arg1)[2]
B               <- (n/(m-1)) * sum( ( apply(arg1,2,mean) - mean(arg1) )^2 )
W               <- (1/m) * (1/(n-1)) * sum( (arg1 - apply(arg1,2,mean))^2 )
sqrt( (n-1)/(n) + B/(W*n) )
}
#r.hat(sapply(1:10,function(x) s.param[[x]][,4] ))
theta.hat.j     <- function(j,mu,sigma2,tau2) {
y.bar.j       <- mean(df$measure[df$machine==j])
n.j           <- length(df$measure[df$machine==j])
( (1/tau2) * mu + (n.j/sigma2) * y.bar.j  ) / ( (1/tau2) + (n.j/sigma2)  )
}
V.theta.hat.j   <- function(j,mu,sigma2,tau2) {
n.j           <- length(df$measure[df$machine==j])
( 1 ) / ( (1/tau2) + (n.j/sigma2) )
}
s.theta         <- function(mu,sigma2,tau2) {
theta         <- NULL
for (j in 1:J) {
t.hat       <- theta.hat.j(j,mu,sigma2,tau2)
v.t.hat     <- V.theta.hat.j(j,mu,sigma2,tau2)
theta[j]    <- rnorm(1,t.hat,sqrt(v.t.hat))
}
return(theta)
}
sims          <- 200
mcmc.gibbs      <- function(chain) {
res1          <- as.list(NULL)
param         <- 9
s.param       <- matrix(NA, ncol = param, nrow = sims )
colnames(s.param)<-  c("theta1", "theta2", "theta3", "theta4", "theta5", "theta6", "mu", "sigma2", "tau2")
s.param[1,1:6]<- theta.0[chain,]
s.param[1,9]  <- s.tau.post(theta.0[chain,])
s.param[1,8]  <- s.sigma.post(theta.0[chain,])
s.param[1,7]  <- s.mu(theta.0[chain,],s.param[1,9])
for (s in 2:sims) {
s.param[s,1:6]<- s.theta(s.param[s-1,7],s.param[s-1,8],s.param[s-1,9])
s.param[s,9]  <- s.tau.post(s.param[s,1:6])
s.param[s,8]  <- s.sigma.post(s.param[s,1:6])
s.param[s,7]  <- s.mu(s.param[s,1:6],s.param[s,9])
}
return(s.param)
#Warm-up
}
s.param           <- lapply(1:10, function(x) mcmc.gibbs(x))
s.param.1         <- s.param[[1]][101:200, ]
#Transform the variance in to sd.
s.param.1[,8:9]   <- sqrt(s.param.1[,8:9] )
t(apply(s.param.1,2, function(x) quantile(x, c(.025,.25,.5,.75,.975))))
r.hat             <- function(arg1) {
n               <- dim(arg1)[1]
m               <- dim(arg1)[2]
B               <- (n/(m-1)) * sum( ( apply(arg1,2,mean) - mean(arg1) )^2 )
W               <- (1/m) * (1/(n-1)) * sum( (arg1 - apply(arg1,2,mean))^2 )
sqrt( (n-1)/(n) + B/(W*n) )
}
#r.hat(sapply(1:10,function(x) s.param[[x]][,4] ))
y.bar.dot.dot   <-  mean(df$measure)
var.pooled      <-  sum( (df$measure[df$machine==6] - mean(df$measure))^2 )/( length(df$measure) - 1)
s.theta.pooled.6<- rnorm(sims, y.bar.dot.dot, sqrt(var.pooled))
y.bar.6.dot     <-  mean(df$measure[df$machine==6])
var.sep.6       <-  sum( (df$measure[df$machine==6] - mean(df$measure[df$machine==6]))^2 )/( length(df$measure[df$machine==6]) - 1)
s.theta.sep.6   <- rnorm(sims, y.bar.6.dot, sqrt(var.sep.6))
names(s.param)
names(s.param.1)
colnames(s.param.1)
plot(density(s.param.1[,"theta6"]))
plot(density(s.param.1[,"theta6"]), title=NULL)
plot(density(s.param.1[,"theta6"]), title=NULL)
plot(density(s.param.1[,"theta6"]), title="")
plot(density(s.param.1[,"theta6"]), title=" ")
plot(density(s.param.1[,"theta6"]), title(main=""))
plot(density(s.param.1[,"theta6"]), title(main=NULL))
plot(density(s.param.1[,"theta6"]))
plot(density(s.param.1[,"theta6"]), col="red")
lines(density(s.theta.pooled.6), col="blue")
lines(density(s.theta.sep.6), col="green")
title(main=Distribution for mean measure under 3 different models)
title(main="Distribution for mean measure under 3 different models")
plot(density(s.param.1[,"theta6"]), col="red", xlab="Mean Measure", #Change the x-axis label
ylab="Density", #y-axis label
main="Distribution of Mean Measure under Three Models")#Main title )
lines(density(s.theta.pooled.6), col="blue")
lines(density(s.theta.sep.6), col="green")
plot(density(s.param.1[,"theta6"]), col="red", xlab="Mean Measure",
ylab="Density", main="Distribution of Mean Measure under Three Models")
lines(density(s.theta.pooled.6), col="blue")
lines(density(s.theta.sep.6), col="green")
plot(density(s.param.1[,"theta6"]), col="red", xlab="Mean Measure",
ylab="Density", main="Distribution of Mean Measure under Three Models")
lines(density(s.theta.pooled.6), col="blue")
lines(density(s.theta.sep.6), col="green")
legend("topleft",col = c("red","blue", "green") ,legend=c("Hierarchical","pooled", "separated"),lty = c(1,1,1))
y.1             <-  c(5.0, 13.0, 7.2, 6.8, 12.8, 5.8, 9.5, 6.0, 3.8, 14.3, 1.8, 6.9, 4.7, 9.5)
y.2             <-  c(0.9, 12.9, 2.6, 3.5, 26.6, 1.5, 13.0, 8.8, 19.5, 2.5, 9.0, 13.1, 3.6, 6.9)
y.3             <-  c(14.3, 6.9, 7.6, 9.8, 2.6, 43.5, 4.9, 3.5, 4.8, 5.6, 3.5, 3.9, 6.7)
basement.1      <-  c(1,1,1,1,1,0,1,1,1,0,1,1,1,1)
basement.2      <-  c(0,1,1,0,1,1,1,1,1,0,1,1,1,0)
basement.3      <-  c(1,0,1,0,1,1,1,1,1,1,1,1,1)
counties        <-  rep(1:3,c(length(y.1),length(y.2),length(y.3)))
y               <-  c(y.1,y.2,y.3)
indicators      <-  as.matrix(table(1:length(counties), counties))
x               <-  cbind(basement=c(basement.1,basement.2,basement.3), indicators)
colnames(x)     <-  c("basement","countie1", "countie2", "countie3")
lf.1            <-  summary( lm(log(y)~x) )
nsim <- 10000
n <- nrow(x)
k <- ncol(x)
sigma <- rep (NA, nsim)
beta <- array (NA, c(nsim, k))
summary(lf.1)$sigma
lf.1
(lf.1)names
names(lf.1)
lf.1$sigma
vcov(lf.1)
lf.1$coefficients[,1]
s.sigma           <- lf.1$sigma*sqrt((n-k)/rchisq(nsim,n-k))
s.beta            <- lf.1$coefficients[,1] +
matrix(rnorm( nsim * k, nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ) * s.sigma
s.beta            <- lf.1$coefficients[,1] +
matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ) * s.sigma
dim(s.beta)
hist(s.beta[,2])
hist(s.beta[,3])
hist(s.beta[,4])
ls.out <- lsfit (x, log(y), intercept=F)
lsd <- ls.diag (ls.out)
for (i in 1:nsim){
#summary(asd))$sigma
sigma[i] <- lf.1$sigma*sqrt((n-k)/rchisq(1,n-k))
#lsd$std.dev = sum(asd)$coefficients[,2]
beta[i,] <- ls.out$coef + (sigma[i]/lsd$std.dev)*lsd$std.err*t(chol(lsd$corr))%*%rnorm(k)
output <- exp (cbind (beta[,2], beta[,1]+beta[,2], beta[,3],
beta[,1] + beta[,3], beta[,4], beta[,1] + beta[,4], beta[,1], sigma))
for (i in 1:ncol(output)) print (round(quantile(output[,i],c(.25,.5,.75)),1))
for (i in 1:nsim){
#summary(asd))$sigma
sigma[i] <- lf.1$sigma*sqrt((n-k)/rchisq(1,n-k))
#lsd$std.dev = sum(asd)$coefficients[,2]
beta[i,] <- ls.out$coef + (sigma[i]/lsd$std.dev)*lsd$std.err*t(chol(lsd$corr))%*%rnorm(k)
}
hist(beta[,4])
nsim <- 10000
n <- nrow(x)
k <- ncol(x)
sigma <- rep (NA, nsim)
beta <- array (NA, c(nsim, k))
for (i in 1:nsim){
sigma[i] <- lsd$std.dev*sqrt((n-k)/rchisq(1,n-k))
beta[i,] <- ls.out$coef + (sigma[i]/lsd$std.dev)*lsd$std.err*t(chol(lsd$corr))%*%rnorm(k)}
output <- exp (cbind (beta[,2], beta[,1]+beta[,2], beta[,3],
beta[,1] + beta[,3], beta[,4], beta[,1] + beta[,4], beta[,1], sigma))
for (i in 1:ncol(output)) print (round(quantile(output[,i],c(.25,.5,.75)),1))
dim(beta))
dim(beta)
hist(beta[,4])
hist(s.beta[,4])
ls.out$coef
lf.1$coef[,1]
lf.1$coef[,1] +lf.1[1,1]
lf.1$coef[,1] +lf.1$coef[1,1]
lf.1            <-  summary( lm(log(y)~x-1) )
lf.1$coef[,1]
ls.out$coef
nsim <- 10000
n <- nrow(x)
k <- ncol(x)
sigma <- rep (NA, nsim)
beta <- array (NA, c(nsim, k))
ls.out <- lsfit (x, log(y), intercept=F)
lsd <- ls.diag (ls.out)
s.sigma           <- lf.1$sigma*sqrt((n-k)/rchisq(nsim,n-k))
s.beta            <- lf.1$coefficients[,1] +
matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ) * s.sigma
hist(s.beta[,4])
ls.out <- lsfit(x, log(y), intercept=F)
lsd <- ls.diag(ls.out)
lf.1$sigma
lsd$std.dev
chol( vcov(lf.1) )
chol(lsd$corr)
lsd$std.err
t(chol(lsd$corr))
lsd$std.err*chol( vcov(lf.1) )
t(chol(lsd$corr))%*%rnorm(k)
lsd$std.err*t(chol(lsd$corr))%*%rnorm(k)
lsd$std.err*chol( vcov(lf.1) )
corr(beta)
cor(beta)
for (i in 1:nsim){
sigma[i] <- lsd$std.dev*sqrt((n-k)/rchisq(1,n-k))
beta[i,] <- ls.out$coef + (sigma[i]/lsd$std.dev)*lsd$std.err*t(chol(lsd$corr))%*%rnorm(k)
}
cor(beta)
vcov(lf.1)
vcov(lf.1)/diag(vcov(lf.1))
cor(s.beta)
dim( matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ) )
for (i in 1:nsim){
sigma[i] <- lsd$std.dev*sqrt((n-k)/rchisq(1,n-k))
beta[i,] <- ls.out$coef + (sigma[i]/lsd$std.dev)*lsd$std.err*t(chol( vcov(lf.1)))%*%rnorm(k)
}
hist(beta[,4])
cor(beta)
lf.1$coefficients[,2]
lf.1$coefficients
s.sigma           <- lf.1$sigma*sqrt((n-k)/rchisq(nsim,n-k))
s.beta            <- lf.1$coefficients[,1] +  (s.sigma/lf.1$sigma) * lf.1$coefficients[,2] *
matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) )
cor(s.beta)
cor(matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ))
cor(lf.1$coefficients + matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ))
cor(lf.1$coefficients[,1] + matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ))
cor(t(lf.1$coefficients[,1]) + matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ))
t(lf.1$coefficients[,1])
lf.1$coefficients[,1]
rep(lf.1$coefficients[,1], 2)
matrix(rep(lf.1$coefficients[,1], 2), ncol=4, nrow=2
)
matrix(rep(lf.1$coefficients[,1], 2), ncol=4, nrow=2, byrow = TRUE)
cor(matrix(rep(lf.1$coefficients[,1], 2), ncol=4, nrow=nsim, byrow = TRUE) + matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ))
s.sigma           <- lf.1$sigma*sqrt((n-k)/rchisq(nsim,n-k))
s.beta            <- matrix(rep(lf.1$coefficients[,1], 2), ncol=4, nrow=nsim, byrow = TRUE) + matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ))
s.sigma           <- lf.1$sigma*sqrt((n-k)/rchisq(nsim,n-k))
s.beta            <- matrix(rep(lf.1$coefficients[,1], 2), ncol=4, nrow=nsim, byrow = TRUE) + matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) )
cor(s.beta)
hist(s.beta[,1])
hist(beta[,1])
s.sigma           <- lf.1$sigma*sqrt((n-k)/rchisq(nsim,n-k))
s.beta            <- matrix(rep(lf.1$coefficients[,1], 2), ncol=4, nrow=nsim, byrow = TRUE) +
matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ) * s.sigma
hist(s.beta[,1])
cor(s.beta)
vcov(lf.1)
vcov(lf.1)/ diag(vcov(lf.1))
s.sigma           <- lf.1$sigma*sqrt((n-k)/rchisq(nsim,n-k))
s.beta            <- matrix(rep(lf.1$coefficients[,1], 2), ncol=4, nrow=nsim, byrow = TRUE) +
matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ) * s.sigma/lf.1$sigma
hist(s.beta[,1])
hist(beta[,1])
s.beta.2.bins  <- cut(s.beta[,2], quantile(s.beta[,2], probs=1:10/10))
boxplot(s.beta[,3]~s.beta.2.bins)
abline(h = 0)
boxplot(s.beta[,3]~s.beta.2.bins, xlab=deciles of expression(beta))
s.beta.2.bins  <- cut(s.beta[,2], quantile(s.beta[,2], probs=1:10/10))
boxplot(s.beta[,3]~s.beta.2.bins, xlab="deciles of expression(beta)")
s.beta.2.bins  <- cut(s.beta[,2], quantile(s.beta[,2], probs=1:10/10))
boxplot(s.beta[,3]~s.beta.2.bins, xlab="deciles of \expression(beta)")
s.beta.2.bins  <- cut(s.beta[,2], quantile(s.beta[,2], probs=1:10/10))
boxplot(s.beta[,3]~s.beta.2.bins, xlab="deciles of expression(\beta)")
s.beta.2.bins  <- cut(s.beta[,2], quantile(s.beta[,2], probs=1:10/10))
boxplot(s.beta[,3]~s.beta.2.bins, xlab="deciles of expresion(beta)")
s.beta.2.bins  <- cut(s.beta[,2], quantile(s.beta[,2], probs=1:10/10))
boxplot(s.beta[,3]~s.beta.2.bins, xlab="deciles of beta_2", ylab="beta 3",
main="Distribution of the mean for B. Earth County with basement, relative to without basement")
output <- exp (cbind (beta[,2], beta[,1]+beta[,2], beta[,3],
beta[,1] + beta[,3], beta[,4], beta[,1] + beta[,4], beta[,1], sigma))
for (i in 1:ncol(output)) print (round(quantile(output[,i],c(.25,.5,.75)),1))
s.beta.2.bins  <- cut(exp(s.beta[,2]), quantile(s.beta[,2], probs=1:10/10))
boxplot(exp(s.beta[,3])~s.beta.2.bins, xlab="deciles of beta_2", ylab="beta 3",
main="Distribution of the mean for B. Earth County with basement, relative to without basement")
ls.out <- lsfit(x, log(y), intercept=F)
lsd <- ls.diag(ls.out)
s.sigma           <- lf.1$sigma*sqrt((n-k)/rchisq(nsim,n-k))
s.beta            <- matrix(rep(lf.1$coefficients[,1], 2), ncol=4, nrow=nsim, byrow = TRUE) +
matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ) * s.sigma/lf.1$sigma
s.beta.2.bins  <- cut(s.beta[,2], quantile(s.beta[,2], probs=1:10/10))
boxplot(s.beta[,3]~s.beta.2.bins, xlab="deciles of beta_2", ylab="beta 3",
main="Distribution of the mean for B. Earth County with basement, relative to without basement")
# Analysis of Radon measures
y.1             <-  c(5.0, 13.0, 7.2, 6.8, 12.8, 5.8, 9.5, 6.0, 3.8, 14.3, 1.8, 6.9, 4.7, 9.5)
y.2             <-  c(0.9, 12.9, 2.6, 3.5, 26.6, 1.5, 13.0, 8.8, 19.5, 2.5, 9.0, 13.1, 3.6, 6.9)
y.3             <-  c(14.3, 6.9, 7.6, 9.8, 2.6, 43.5, 4.9, 3.5, 4.8, 5.6, 3.5, 3.9, 6.7)
basement.1      <-  c(1,1,1,1,1,0,1,1,1,0,1,1,1,1)
basement.2      <-  c(0,1,1,0,1,1,1,1,1,0,1,1,1,0)
basement.3      <-  c(1,0,1,0,1,1,1,1,1,1,1,1,1)
counties        <-  rep(1:3,c(length(y.1),length(y.2),length(y.3)))
y               <-  c(y.1,y.2,y.3)
indicators      <-  as.matrix(table(1:length(counties), counties))
x               <-  cbind(basement=c(basement.1,basement.2,basement.3), indicators)
colnames(x)     <-  c("basement","countie1", "countie2", "countie3")
lf.1            <-  summary( lm(log(y)~x-1) )
nsim <- 10000
n <- nrow(x)
k <- ncol(x)
sigma <- rep (NA, nsim)
beta <- array (NA, c(nsim, k))
ls.out <- lsfit(x, log(y), intercept=F)
lsd <- ls.diag(ls.out)
s.sigma           <- lf.1$sigma*sqrt((n-k)/rchisq(nsim,n-k))
s.beta            <- matrix(rep(lf.1$coefficients[,1], 2), ncol=4, nrow=nsim, byrow = TRUE) +
matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ) * s.sigma/lf.1$sigma
s.beta.2.bins  <- cut(s.beta[,2], quantile(s.beta[,2], probs=1:10/10))
boxplot(s.beta[,3]~s.beta.2.bins, xlab="deciles of beta_2", ylab="beta 3",
main="Distribution of the mean for B. Earth County with basement, relative to without basement")
#output <- exp (cbind (beta[,2], beta[,1]+beta[,2], beta[,3],
#beta[,1] + beta[,3], beta[,4], beta[,1] + beta[,4], beta[,1], sigma))
#for (i in 1:ncol(output)) print (round(quantile(output[,i],c(.25,.5,.75)),1))
setwd("C:/Users/fhocesde/Documents/tutorials/Bayesian/BDA3")
## Get Data
prez88 <- read.table("prez48to88.txt", header = T)
prez92 <- read.table("prez92.txt", header = T)
## Get y, X
y <- prez88[,1]
X <- as.matrix(prez88[, -(1:4)])
n <- nrow(X)
p <- ncol(X)
## Least square calculations
beta.ls <- lm(y ~ 0 + X)$coeff
V <- crossprod(X)
resid.ls <- y - c(X %*% beta.ls)
s2 <- sum(resid.ls^2) / (n - p)
## Xnew from 1992 data
Xnew <- as.matrix(prez92[, -(1:4)])
nnew <- nrow(Xnew)
# Analysis of Radon measures
y.1             <-  c(5.0, 13.0, 7.2, 6.8, 12.8, 5.8, 9.5, 6.0, 3.8, 14.3, 1.8, 6.9, 4.7, 9.5)
y.2             <-  c(0.9, 12.9, 2.6, 3.5, 26.6, 1.5, 13.0, 8.8, 19.5, 2.5, 9.0, 13.1, 3.6, 6.9)
y.3             <-  c(14.3, 6.9, 7.6, 9.8, 2.6, 43.5, 4.9, 3.5, 4.8, 5.6, 3.5, 3.9, 6.7)
basement.1      <-  c(1,1,1,1,1,0,1,1,1,0,1,1,1,1)
basement.2      <-  c(0,1,1,0,1,1,1,1,1,0,1,1,1,0)
basement.3      <-  c(1,0,1,0,1,1,1,1,1,1,1,1,1)
counties        <-  rep(1:3,c(length(y.1),length(y.2),length(y.3)))
y               <-  c(y.1,y.2,y.3)
indicators      <-  as.matrix(table(1:length(counties), counties))
x               <-  cbind(basement=c(basement.1,basement.2,basement.3), indicators)
colnames(x)     <-  c("basement","countie1", "countie2", "countie3")
lf.1            <-  summary( lm(log(y)~x-1) )
nsim <- 10000
n <- nrow(x)
k <- ncol(x)
sigma <- rep (NA, nsim)
beta <- array (NA, c(nsim, k))
ls.out <- lsfit(x, log(y), intercept=F)
lsd <- ls.diag(ls.out)
s.sigma           <- lf.1$sigma*sqrt((n-k)/rchisq(nsim,n-k))
s.beta            <- matrix(rep(lf.1$coefficients[,1], 2), ncol=4, nrow=nsim, byrow = TRUE) +
matrix(rnorm( nsim * k), nrow = nsim, ncol = k ) %*% chol( vcov(lf.1) ) * s.sigma/lf.1$sigma
s.beta.2.bins  <- cut(s.beta[,2], quantile(s.beta[,2], probs=1:10/10))
boxplot(s.beta[,3]~s.beta.2.bins, xlab="deciles of beta_2", ylab="beta 3",
main="Distribution of the mean for B. Earth County with basement, relative to without basement")
#output <- exp (cbind (beta[,2], beta[,1]+beta[,2], beta[,3],
#beta[,1] + beta[,3], beta[,4], beta[,1] + beta[,4], beta[,1], sigma))
#for (i in 1:ncol(output)) print (round(quantile(output[,i],c(.25,.5,.75)),1))
dim(s.beta)
